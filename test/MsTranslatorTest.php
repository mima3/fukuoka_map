<?php

require dirname(__FILE__) . '/../config.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-07 at 18:11:53.
 */
class MsTranslatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MsTranslatorCacheModel
     */
    protected $model;

    public static function setUpBeforeClass()
    {

    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $app = new \Slim\Slim();
        ORM::configure('sqlite::memory:');
        $db = ORM::get_db();
        $this->model = new \Model\MsTranslatorCacheModel($app, $db);
        $this->model->setup();

        $en_inp = array();
        $en_inp += array('猫'=>'cat');
        $en_inp += array('犬'=>'dog');
        $this->model->addCache('en', $en_inp);

        $de_inp = array();
        $de_inp += array('猫'=>'Katze');
        $this->model->addCache('de', $de_inp);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ORM::reset_db();
    }

    /**
     * 英語の試験
     */
    function testEnglishTranslator()
    {
        $cache_db = $this->model->getCache('en');

        $trans = new \MyLib\MsTranslator(MS_AZURE_KEY,  $this->model, 'en');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');
        $this->assertEquals('cat' , $trans->translator('猫'), '登録済みのデータ');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');


        $this->assertEquals('Human' , $trans->translator('人間'), '未登録のデータを翻訳');
        $this->assertEquals(true , $trans->needUpdate(), '新規の単語を取得後は更新の必要あり');

        $cache_db = $this->model->getCache('en');
        $this->assertEquals(false ,isset($chace_db['人間']) , 'データベースには未反映');

        $trans->updateCacheDb();
        $this->assertEquals(false , $trans->needUpdate(), 'DB反映後は更新フラグがOFF');

        $cache_db = $this->model->getCache('en');

        $this->assertEquals(true ,isset($cache_db['人間']) , 'データベースは反映済み');
        $this->assertEquals('Human' ,$cache_db['人間'] , 'DBに更新される');
        
    }

    /**
     * ドイツ語の試験
     */
    function testGermanTranslator()
    {
        $cache_db = $this->model->getCache('de');

        $trans = new \MyLib\MsTranslator(MS_AZURE_KEY,  $this->model, 'de');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');
        $this->assertEquals('Katze' , $trans->translator('猫'), '登録済みのデータ');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');


        $this->assertEquals('Menschlichen' , $trans->translator('人間'), '未登録のデータを翻訳');
        $this->assertEquals(true , $trans->needUpdate(), '新規の単語を取得後は更新の必要あり');

        $cache_db = $this->model->getCache('de');
        $this->assertEquals(false ,isset($chace_db['人間']) , 'データベースには未反映');

        $trans->updateCacheDb();
        $this->assertEquals(false , $trans->needUpdate(), 'DB反映後は更新フラグがOFF');

        $cache_db = $this->model->getCache('de');

        $this->assertEquals(true ,isset($cache_db['人間']) , 'データベースは反映済み');
        $this->assertEquals('Menschlichen' ,$cache_db['人間'] , 'DBに更新される');
        
    }

    /**
     * 取得できない場合
     */
    function testErrTranslator()
    {
        $cache_db = $this->model->getCache('en');

        $trans = new \MyLib\MsTranslator('ERRORTOKEN',  $this->model, 'en');
        $this->assertEquals('人間' , $trans->translator('人間'), '取得できない場合は日本語を返す');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');
        $cache_db = $this->model->getCache('de');
        $this->assertEquals(false ,isset($chace_db['人間']) , 'データベースには未反映');
     }

    /**
     * 翻訳不要の場合のテスト
     */
    function testNoTranslator()
    {
        $cache_db = $this->model->getCache('en');

        $trans = new \MyLib\MsTranslator(MS_AZURE_KEY,  $this->model, 'en');
        $this->assertEquals(false , $trans->needUpdate(), '初回時は更新の必要はない');
        $this->assertEquals('1234567890' , $trans->translator('1234567890'), '数値の場合');
        $this->assertEquals(false , $trans->needUpdate(), '翻訳処理が実行されていないことを確認');
        $this->assertEquals('abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ' , $trans->translator('abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ'), 'アルファベットの場合');
        $this->assertEquals(false , $trans->needUpdate(), '翻訳処理が実行されていないことを確認');
        $this->assertEquals('!"#$%&\'\\()=-~^|{[`]}*+_?/><,.' , $trans->translator('!"#$%&\'\\()=-~^|{[`]}*+_?/><,.'), '記号の場合');
        $this->assertEquals(false , $trans->needUpdate(), '翻訳処理が実行されていないことを確認');
        $this->assertEquals('One Chair' , $trans->translator('1つの椅子'), '記号の場合');
        $this->assertEquals(true , $trans->needUpdate(), '数字と日本語が混ざる場合は翻訳実施');
    }

}
